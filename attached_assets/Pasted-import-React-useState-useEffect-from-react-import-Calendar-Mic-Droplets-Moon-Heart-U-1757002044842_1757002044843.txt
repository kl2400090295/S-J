import React, { useState, useEffect } from 'react';
import { Calendar, Mic, Droplets, Moon, Heart, Utensils, Music, Clock, ChevronLeft, ChevronRight, Plus, TrendingUp, Save } from 'lucide-react';

const SingingJournalApp = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [activeTab, setActiveTab] = useState('daily');
  const [entries, setEntries] = useState({});
  const [weeklyActivities, setWeeklyActivities] = useState({});
  const [showSaveMessage, setShowSaveMessage] = useState(false);

  // Load data from localStorage on component mount
  useEffect(() => {
    const savedEntries = localStorage.getItem('voiceJournalEntries');
    const savedActivities = localStorage.getItem('voiceJournalActivities');
    
    if (savedEntries) {
      setEntries(JSON.parse(savedEntries));
    }
    if (savedActivities) {
      setWeeklyActivities(JSON.parse(savedActivities));
    }
  }, []);

  const formatDate = (date) => {
    return date.toISOString().split('T')[0];
  };

  const formatDisplayDate = (date) => {
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const getCurrentEntry = () => {
    const dateKey = formatDate(currentDate);
    return entries[dateKey] || {
      hydration: 2,
      sleep: 7,
      hormonal: '',
      nutrition: '',
      voiceAM: '',
      voicePM: '',
      voiceAfterSinging: '',
      notes: ''
    };
  };

  const saveData = () => {
    try {
      localStorage.setItem('voiceJournalEntries', JSON.stringify(entries));
      localStorage.setItem('voiceJournalActivities', JSON.stringify(weeklyActivities));
      setShowSaveMessage(true);
      setTimeout(() => setShowSaveMessage(false), 2000);
    } catch (error) {
      console.error('Error saving data:', error);
      setShowSaveMessage(true);
      setTimeout(() => setShowSaveMessage(false), 2000);
    }
  };

  const updateEntry = (field, value) => {
    const dateKey = formatDate(currentDate);
    setEntries(prev => ({
      ...prev,
      [dateKey]: {
        ...getCurrentEntry(),
        [field]: value
      }
    }));
  };

  const getWeekStart = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day;
    return new Date(d.setDate(diff));
  };

  const getWeekDays = () => {
    const weekStart = getWeekStart(currentDate);
    const days = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(weekStart);
      day.setDate(weekStart.getDate() + i);
      days.push(day);
    }
    return days;
  };

  const updateWeeklyActivity = (dayIndex, activity) => {
    const weekStart = formatDate(getWeekStart(currentDate));
    setWeeklyActivities(prev => ({
      ...prev,
      [weekStart]: {
        ...prev[weekStart],
        [dayIndex]: activity
      }
    }));
  };

  const getWeeklyActivity = (dayIndex) => {
    const weekStart = formatDate(getWeekStart(currentDate));
    return weeklyActivities[weekStart]?.[dayIndex] || '';
  };

  const navigateDate = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + direction);
    setCurrentDate(newDate);
  };

  const navigateWeek = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + (direction * 7));
    setCurrentDate(newDate);
  };

  const getStats = () => {
    const recentEntries = Object.entries(entries)
      .slice(-7)
      .map(([date, entry]) => entry);
    
    if (recentEntries.length === 0) return null;

    const avgHydration = recentEntries.reduce((sum, entry) => sum + (entry.hydration || 0), 0) / recentEntries.length;
    const avgSleep = recentEntries.reduce((sum, entry) => sum + (entry.sleep || 0), 0) / recentEntries.length;
    
    return {
      avgHydration: Math.round(avgHydration),
      avgSleep: avgSleep.toFixed(1),
      entriesCount: recentEntries.length
    };
  };

  const currentEntry = getCurrentEntry();
  const stats = getStats();

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-100">
      <div className="max-w-md mx-auto bg-white shadow-2xl min-h-screen">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-6 rounded-b-3xl">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Mic className="w-8 h-8" />
              <h1 className="text-2xl font-bold">Voice Journal</h1>
            </div>
            <div className="flex items-center space-x-1">
              <Music className="w-5 h-5" />
              <TrendingUp className="w-5 h-5" />
            </div>
          </div>
          
          {/* Tab Navigation */}
          <div className="flex bg-white/20 rounded-full p-1">
            <button
              onClick={() => setActiveTab('daily')}
              className={`flex-1 py-2 px-4 rounded-full text-sm font-medium transition-all ${
                activeTab === 'daily' 
                  ? 'bg-white text-purple-600 shadow-md' 
                  : 'text-white/80 hover:text-white'
              }`}
            >
              Daily Log
            </button>
            <button
              onClick={() => setActiveTab('weekly')}
              className={`flex-1 py-2 px-4 rounded-full text-sm font-medium transition-all ${
                activeTab === 'weekly' 
                  ? 'bg-white text-purple-600 shadow-md' 
                  : 'text-white/80 hover:text-white'
              }`}
            >
              Weekly Plan
            </button>
            <button
              onClick={() => setActiveTab('stats')}
              className={`flex-1 py-2 px-4 rounded-full text-sm font-medium transition-all ${
                activeTab === 'stats' 
                  ? 'bg-white text-purple-600 shadow-md' 
                  : 'text-white/80 hover:text-white'
              }`}
            >
              Insights
            </button>
          </div>
        </div>

        <div className="p-6 pb-24">
          {activeTab === 'daily' && (
            <div className="space-y-6">
              {/* Date Navigation */}
              <div className="flex items-center justify-between bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl p-4">
                <button 
                  onClick={() => navigateDate(-1)}
                  className="p-2 hover:bg-white/50 rounded-full transition-colors"
                >
                  <ChevronLeft className="w-5 h-5 text-purple-600" />
                </button>
                <div className="text-center">
                  <div className="text-sm text-purple-600 font-medium">
                    {formatDisplayDate(currentDate)}
                  </div>
                </div>
                <button 
                  onClick={() => navigateDate(1)}
                  className="p-2 hover:bg-white/50 rounded-full transition-colors"
                >
                  <ChevronRight className="w-5 h-5 text-purple-600" />
                </button>
              </div>

              {/* Health Tracking */}
              <div className="space-y-4">
                {/* Hydration */}
                <div className="bg-blue-50 rounded-2xl p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <Droplets className="w-5 h-5 text-blue-600" />
                    <label className="font-medium text-blue-900">Hydration</label>
                  </div>
                  <div className="flex items-center space-x-4">
                    <input
                      type="range"
                      min="0"
                      max="12"
                      step="1"
                      value={currentEntry.hydration}
                      onChange={(e) => updateEntry('hydration', parseInt(e.target.value))}
                      className="flex-1 h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer"
                    />
                    <span className="text-blue-700 font-bold min-w-[4rem]">
                      {currentEntry.hydration} glasses
                    </span>
                  </div>
                </div>

                {/* Sleep */}
                <div className="bg-indigo-50 rounded-2xl p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <Moon className="w-5 h-5 text-indigo-600" />
                    <label className="font-medium text-indigo-900">Sleep</label>
                  </div>
                  <div className="flex items-center space-x-4">
                    <input
                      type="range"
                      min="0"
                      max="12"
                      step="0.5"
                      value={currentEntry.sleep}
                      onChange={(e) => updateEntry('sleep', parseFloat(e.target.value))}
                      className="flex-1 h-2 bg-indigo-200 rounded-lg appearance-none cursor-pointer"
                    />
                    <span className="text-indigo-700 font-bold min-w-[3rem]">
                      {currentEntry.sleep}h
                    </span>
                  </div>
                </div>

                {/* Hormonal Notes */}
                <div className="bg-pink-50 rounded-2xl p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <Heart className="w-5 h-5 text-pink-600" />
                    <label className="font-medium text-pink-900">Hormonal Notes</label>
                  </div>
                  <input
                    type="text"
                    placeholder="e.g., Day 1 of period, PMS, etc."
                    value={currentEntry.hormonal}
                    onChange={(e) => updateEntry('hormonal', e.target.value)}
                    className="w-full p-3 bg-white rounded-xl border border-pink-200 focus:border-pink-400 focus:outline-none"
                  />
                </div>

                {/* Nutrition */}
                <div className="bg-green-50 rounded-2xl p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <Utensils className="w-5 h-5 text-green-600" />
                    <label className="font-medium text-green-900">Nutrition Notes</label>
                  </div>
                  <textarea
                    placeholder="What did you eat? Any foods affecting your voice?"
                    value={currentEntry.nutrition}
                    onChange={(e) => updateEntry('nutrition', e.target.value)}
                    rows={3}
                    className="w-full p-3 bg-white rounded-xl border border-green-200 focus:border-green-400 focus:outline-none resize-none"
                  />
                </div>
              </div>

              {/* Voice Observations */}
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-4">
                <div className="flex items-center space-x-3 mb-4">
                  <Mic className="w-5 h-5 text-purple-600" />
                  <h3 className="font-bold text-purple-900">Voice Observations</h3>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-purple-700 mb-2">Morning (AM)</label>
                    <textarea
                      placeholder="How does your voice feel this morning?"
                      value={currentEntry.voiceAM}
                      onChange={(e) => updateEntry('voiceAM', e.target.value)}
                      rows={2}
                      className="w-full p-3 bg-white rounded-xl border border-purple-200 focus:border-purple-400 focus:outline-none resize-none"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-purple-700 mb-2">Evening (PM)</label>
                    <textarea
                      placeholder="How does your voice feel at the end of the day?"
                      value={currentEntry.voicePM}
                      onChange={(e) => updateEntry('voicePM', e.target.value)}
                      rows={2}
                      className="w-full p-3 bg-white rounded-xl border border-purple-200 focus:border-purple-400 focus:outline-none resize-none"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-purple-700 mb-2">After Singing</label>
                    <textarea
                      placeholder="How does your voice feel after practice/performance?"
                      value={currentEntry.voiceAfterSinging}
                      onChange={(e) => updateEntry('voiceAfterSinging', e.target.value)}
                      rows={2}
                      className="w-full p-3 bg-white rounded-xl border border-purple-200 focus:border-purple-400 focus:outline-none resize-none"
                    />
                  </div>
                </div>
              </div>

              {/* Personal Notes */}
              <div className="bg-yellow-50 rounded-2xl p-4">
                <div className="flex items-center space-x-3 mb-3">
                  <Plus className="w-5 h-5 text-yellow-600" />
                  <label className="font-medium text-yellow-900">Personal Notes</label>
                </div>
                <textarea
                  placeholder="Any thoughts, experiences, or reflections for today?"
                  value={currentEntry.notes}
                  onChange={(e) => updateEntry('notes', e.target.value)}
                  rows={3}
                  className="w-full p-3 bg-white rounded-xl border border-yellow-200 focus:border-yellow-400 focus:outline-none resize-none"
                />
              </div>
            </div>
          )}

          {activeTab === 'weekly' && (
            <div className="space-y-6">
              {/* Week Navigation */}
              <div className="flex items-center justify-between bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl p-4">
                <button 
                  onClick={() => navigateWeek(-1)}
                  className="p-2 hover:bg-white/50 rounded-full transition-colors"
                >
                  <ChevronLeft className="w-5 h-5 text-purple-600" />
                </button>
                <div className="text-center">
                  <div className="text-sm text-purple-600 font-medium">
                    Week of {formatDisplayDate(getWeekStart(currentDate))}
                  </div>
                </div>
                <button 
                  onClick={() => navigateWeek(1)}
                  className="p-2 hover:bg-white/50 rounded-full transition-colors"
                >
                  <ChevronRight className="w-5 h-5 text-purple-600" />
                </button>
              </div>

              {/* Weekly Schedule */}
              <div className="space-y-4">
                <div className="flex items-center space-x-3 mb-4">
                  <Calendar className="w-5 h-5 text-purple-600" />
                  <h3 className="font-bold text-purple-900">Practice & Performance Schedule</h3>
                </div>
                
                {getWeekDays().map((day, index) => (
                  <div key={index} className="bg-white rounded-2xl p-4 border border-purple-100">
                    <div className="flex items-center justify-between mb-3">
                      <span className="font-medium text-purple-900">
                        {day.toLocaleDateString('en-US', { weekday: 'long' })}
                      </span>
                      <span className="text-sm text-purple-600">
                        {day.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                      </span>
                    </div>
                    <textarea
                      placeholder="Practice sessions, rehearsals, performances, or high voice use activities..."
                      value={getWeeklyActivity(index)}
                      onChange={(e) => updateWeeklyActivity(index, e.target.value)}
                      rows={2}
                      className="w-full p-3 bg-purple-50 rounded-xl border border-purple-200 focus:border-purple-400 focus:outline-none resize-none"
                    />
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'stats' && (
            <div className="space-y-6">
              <div className="flex items-center space-x-3 mb-6">
                <TrendingUp className="w-5 h-5 text-purple-600" />
                <h3 className="font-bold text-purple-900">7-Day Insights</h3>
              </div>

              {stats ? (
                <div className="space-y-4">
                  <div className="bg-blue-50 rounded-2xl p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Droplets className="w-6 h-6 text-blue-600" />
                        <div>
                          <div className="font-bold text-blue-900">Average Hydration</div>
                          <div className="text-sm text-blue-600">Last 7 days</div>
                        </div>
                      </div>
                      <div className="text-2xl font-bold text-blue-700">
                        {stats.avgHydration} glasses
                      </div>
                    </div>
                  </div>

                  <div className="bg-indigo-50 rounded-2xl p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Moon className="w-6 h-6 text-indigo-600" />
                        <div>
                          <div className="font-bold text-indigo-900">Average Sleep</div>
                          <div className="text-sm text-indigo-600">Last 7 days</div>
                        </div>
                      </div>
                      <div className="text-2xl font-bold text-indigo-700">
                        {stats.avgSleep}h
                      </div>
                    </div>
                  </div>

                  <div className="bg-purple-50 rounded-2xl p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <Calendar className="w-6 h-6 text-purple-600" />
                        <div>
                          <div className="font-bold text-purple-900">Journal Entries</div>
                          <div className="text-sm text-purple-600">Last 7 days</div>
                        </div>
                      </div>
                      <div className="text-2xl font-bold text-purple-700">
                        {stats.entriesCount}/7
                      </div>
                    </div>
                  </div>

                  <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-6">
                    <div className="text-center">
                      <div className="text-lg font-bold text-green-900 mb-2">
                        Keep up the great work! 🎤
                      </div>
                      <div className="text-sm text-green-700">
                        Consistent tracking helps optimize your vocal performance
                      </div>
                      <div className="text-xs text-green-600 mt-3 opacity-75">
                        💾 All data saved locally on your device
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <Mic className="w-16 h-16 text-purple-300 mx-auto mb-4" />
                  <div className="text-lg font-medium text-purple-900 mb-2">
                    Start Your Voice Journey
                  </div>
                  <div className="text-purple-600 mb-2">
                    Add some daily entries to see your vocal health insights!
                  </div>
                  <div className="text-xs text-purple-500">
                    💾 All entries are saved automatically on your device
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Fixed Save Button */}
        <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-10">
          <button
            onClick={saveData}
            className={`flex items-center space-x-2 px-8 py-4 rounded-full font-bold text-white shadow-lg transition-all duration-300 ${
              showSaveMessage 
                ? 'bg-green-500 scale-105' 
                : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 hover:scale-105'
            }`}
          >
            {showSaveMessage ? (
              <>
                <span>✅</span>
                <span>Saved!</span>
              </>
            ) : (
              <>
                <Save className="w-5 h-5" />
                <span>Save Data</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SingingJournalApp;